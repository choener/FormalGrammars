name:           FormalGrammars
version:        0.1.0.0
author:         Christian Hoener zu Siederdissen, 2013-2014
copyright:      Christian Hoener zu Siederdissen, 2013-2014
homepage:       http://www.tbi.univie.ac.at/~choener/gramprod/
maintainer:     choener@tbi.univie.ac.at
category:       Formal Languages, Bioinformatics
license:        GPL-3
license-file:   LICENSE
build-type:     Simple
stability:      experimental
cabal-version:  >= 1.6.0
synopsis:
                (Context-free) grammars in formal language theory
description:
                Context-free grammars in formal language theory are sets of
                production rules, non-terminal and terminal symbols. This
                library provides basic data types and functions to manipulate
                such grammars.
                .
                Grammars can be defined in a small domain-specific language
                that is very close to typical CFG notation.
                .
                In addition, TemplateHaskell and QuasiQuoting functionality
                allow embedding thusly defined grammars in Haskell programs.
                ADPfusion then turns such a grammar into an efficient dynamic
                program. It is also possible to generate Haskell modules that
                contain the resulting grammar, signature and algebra product.
                .
                Alternatives are ansi- or LaTeX-based pretty-printing for users
                that want to implement their CFG in another language than
                Haskell.
                .
                .
                .
                Formal background can be found in two papers:
                .
                @
                Christian Höner zu Siederdissen, Ivo L. Hofacker, and Peter F. Stadler
                Product Grammars for Alignment and Folding
                IEEE/ACM Transactions on Computational Biology and Bioinformatics (TCBB) (accepted)
                @
                .
                and
                .
                @
                Christian Höner zu Siederdissen, Ivo L. Hofacker, and Peter F. Stadler
                How to Multiply Dynamic Programming Algorithms
                Brazilian Symposium on Bioinformatics (BSB 2013)
                Lecture Notes in Bioinformatics 8213, Springer, Heidelberg
                @
                .



Extra-Source-Files:
  changelog.md

flag examples
  description: build the examples
  default: False
  manual: True

-- TODO relax parsers dependency once https://github.com/ekmett/parsers/issues/37 is dealt with

library
  build-depends:
    ADPfusion             == 0.3.*    ,
    ansi-wl-pprint        == 0.6.7.*  ,
    bytestring            == 0.10.*   ,
    containers                        ,
    data-default          == 0.5.*    ,
    HaTeX                 == 3.13.*   ,
    lens                  == 4.*      ,
    mtl                   == 2.*      ,
    parsers               == 0.11.0.1 ,
    repa                  == 3.2.*    ,
    template-haskell                  ,
    text                  == 1.*      ,
    transformers          == 0.3.*    ,
    trifecta              == 1.4.*    ,
    unordered-containers  == 0.2.*    ,
    vector                == 0.10.*   ,
    base                  == 4.*
  exposed-modules:
    FormalLanguage
    FormalLanguage.CFG
    FormalLanguage.CFG.Grammar
    FormalLanguage.CFG.Parser
    FormalLanguage.CFG.PrettyPrint
    FormalLanguage.CFG.PrettyPrint.ANSI
    FormalLanguage.CFG.PrettyPrint.Haskell
    FormalLanguage.CFG.PrettyPrint.LaTeX
    FormalLanguage.CFG.QuickCheck
    FormalLanguage.CFG.QQ
    FormalLanguage.CFG.TH
  ghc-options:

-- A Simple pretty-printer for formal grammars.

executable GrammarPP
  build-depends:
    cmdargs == 0.10.*
  main-is:
    GrammarPP.hs

executable NussinovFG
  if flag(examples)
    buildable: True
  else
    buildable: False
  build-depends:
    PrimitiveArray    == 0.6.*
  main-is:
    FormalLanguage/CFG/Examples/Nussinov.hs
  ghc-options:
    -Odph
    -fcpr-off
    -funbox-strict-fields
    -funfolding-use-threshold1000
    -funfolding-keeness-factor1000
    -fllvm
    -optlo-O3 -optlo-std-compile-opts
    -fllvm-tbaa

executable NeedlemanWunschFG
  if flag(examples)
    buildable: True
  else
    buildable: False
  build-depends:
    PrimitiveArray    == 0.6.*
  main-is:
    FormalLanguage/CFG/Examples/NeedlemanWunsch.hs
  ghc-options:
    -Odph
    -fcpr-off
    -funbox-strict-fields
    -funfolding-use-threshold1000
    -funfolding-keeness-factor1000
    -fllvm
    -optlo-O3 -optlo-std-compile-opts
    -fllvm-tbaa



source-repository head
  type: git
  location: git://github.com/choener/FormalGrammars

